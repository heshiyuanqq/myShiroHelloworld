<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<context:annotation-config/>
	<context:component-scan base-package="com.shiro" />
	
	<bean id="propertyConfigurer"   class="com.shiro.utils.CustomizedPropertyPlaceholderConfigurer">
	    <property name="ignoreUnresolvablePlaceholders" value="true"></property>
	    <property name="location">
	            <value>classpath:conf/constant.properties</value>
	    </property>
	</bean>
	
	<import resource="classpath:conf/mybatis-context.xml" />
	
	<!-- 	****************************************shiro开始 **********************************************-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>  
  
    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->  
   <!--  <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>   -->
  <!--  其实shiro中的credential就相当于密码 -->
  
    <!-- 缓存管理 -->  
    <bean id="cacheManager" class="com.shiro.utils.MyShiroCacheManager"></bean>  
    <bean id="myJdbcRealm" class="com.shiro.realm.MyJdbcRealm"></bean>
    <bean id="shiroSessionListener" class="com.shiro.listener.MyShiroSessionListener"></bean>
    <bean id="sessionIdGenerator" class="com.shiro.utils.MyJavaUuidSessionIdGenerator"></bean>
  
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
    		 <property name="sessionIdGenerator" ref="sessionIdGenerator"/>  
    </bean>
    
 	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
 		    <property name="sessionDAO" ref="sessionDAO"/>  
 		    <property name="sessionValidationInterval" value="1800000"/>  <!-- 相隔多久检查一次session的有效性 -->  
			<property name="globalSessionTimeout" value="1800000"/>  <!-- session 有效时间为半小时 （毫秒单位）-->  
		<!-- 	<property name="sessionIdCookie.domain" value=".xxx.com"/>   -->
			<property name="sessionIdCookie.name" value="SHIRO_JSESSION_ID"/>  
			<property name="sessionIdCookie.path" value="/"/>  
	        <property name ="sessionListeners">  
		        <list>
		        	<ref bean="shiroSessionListener"/>
		        </list>
	       </property>
   </bean>  
  
    <!-- Shiro安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	        <property name="realm" ref="myJdbcRealm"></property>  
	        <property name="cacheManager" ref="cacheManager"></property>  
	        <property name="sessionManager" ref="sessionManager"></property>
    </bean>  
    
 <!--    为ShiroAuthorizationHelper注入MyShiroCacheManager -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
			<property name="staticMethod" value="com.shiro.utils.ShiroAuthorizationHelper.setCacheManager" />  
			<property name="arguments" ref="cacheManager"/>  
	</bean>  
    
     
  
    <!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
    -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	        <property name="securityManager" ref="securityManager"></property>   <!-- Shiro的核心安全接口，这个属性是必须的 -->  
	        <property name="loginUrl" value="/anon/login.jsp"></property>    <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
	        <!-- <property name="successUrl" value="/" ></property> -->  <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->  
	        <property name="unauthorizedUrl" value="/anon/unauthorized.jsp"></property>   <!-- 用户访问未对其授权的资源(但是已经认证过了，如果没有认证会让其登录！！！)时，所显示的连接 -->  
	        <property name="filterChainDefinitions">  
		            <value> 
		           <!--  hiro验证URL时,URL匹配成功便不再继续匹配查找(所以要注意配置文件中的URL顺序,尤其在使用通配符时)
					* @see   故filterChainDefinitions的配置顺序为自上而下,以最上面的为准  
					
					 anon,authc,authcBasic,user是第一组认证过滤器
					   perms,port,rest,roles,ssl是第二组授权过滤器
					   注意user和authc不同：当应用开启了rememberMe时,用户下次访问时可以是一个user,但绝不会是authc,因为authc是需要重新认证的
					                      user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe
					                      说白了,以前的一个用户登录时开启了rememberMe,然后他关闭浏览器,下次再访问时他就是一个user,而不会authc
					
					 4)举几个例子
					   /admin=authc,roles[admin]      表示用户必需已通过认证,并拥有admin角色才可以正常发起'/admin'请求
					   /edit=authc,perms[admin:edit]  表示用户必需已通过认证,并拥有admin:edit权限才可以正常发起'/edit'请求
					   /home=user                     表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起'/home'请求 
					
					
					5)各默认过滤器常用如下(注意URL Pattern里用到的是两颗星,这样才能实现任意层次的全匹配)
					   /admins/**=anon             无参,表示可匿名使用,可以理解为匿名用户或游客
					   /admins/user/**=authc       无参,表示需认证才能使用
					   /admins/user/**=authcBasic  无参,表示httpBasic认证
					   /admins/user/**=user        无参,表示必须存在用户,当登入操作时不做检查
					   /admins/user/**=ssl         无参,表示安全的URL请求,协议为https
					   /admins/user/**=perms[user:add:*]
					       参数可写多个,多参时必须加上引号,且参数之间用逗号分割,如/admins/user/**=perms["user:add:*,user:modify:*"]
					       当有多个参数时必须每个参数都通过才算通过,相当于isPermitedAll()方法
					   /admins/user/**=port[8081]
					       当请求的URL端口不是8081时,跳转到schemal://serverName:8081?queryString
					       其中schmal是协议http或https等,serverName是你访问的Host,8081是Port端口,queryString是你访问的URL里的?后面的参数
					   /admins/user/**=rest[user]
					       根据请求的方法,相当于/admins/user/**=perms[user:method],其中method为post,get,delete等
					   /admins/user/**=roles[admin]
					       参数可写多个,多个时必须加上引号,且参数之间用逗号分割,如/admins/user/**=roles["admin,guest"]
					       当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles()方法 
					 -->
		                /anon/*=anon  <!-- 测试用例中对/login/*的访问是不需要认证控制的，这主要是用于用户登录和退出的,如果这也需要认证的话，就不像话了因为我去登录就是要去认证的，结果认证还认证？？？$#$%$#$%@% -->
		                /needAuthentication/**=authc
		                /boss/*=authc,roles[boss]
		                
		                /moneyWorker/*=authc,roles[moneyWorker]
		                /moneyWorker/moneyBoss/*=authc,roles[moneyBoss]
		                
		                
		                /productWorker/*=authc,roles[productWorker]
		                /productWorker/productBoss/*=authc,roles[productBoss]
		                
		                
		                /technologyWorker/*=authc,roles[technologyWorker]
		                /technologyWorker/technologyBoss/*=authc,roles[technologyBoss]
		            </value>  
	        </property><!--   这里的过滤器不过滤转发 -->
    </bean>  
  
    <!--   
       开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，  
       并在必要时进行安全逻辑验证  
    -->  
    <!--  
    <bean  
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>  
    <bean  
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"></property>  
    </bean>  
    -->  
	
	<!-- ****************************************shiro结束**************************************** -->
	
	
	
	
</beans>

